/**
 * [TF2] Invisible Heavy Exploit Fix
 */
#pragma semicolon 1
#include <sourcemod>

#include <tf2_stocks>
#include <dhooks>

#pragma newdecls required

#define PLUGIN_VERSION "1.0.0"
public Plugin myinfo = {
	name = "[TF2] Heavy Invisible Exploit Fix",
	author = "nosoop",
	description = "Patches the exploit that allows Heavies to spawn invisible under certain "
			... "conditions.",
	version = PLUGIN_VERSION,
	url = "https://github.com/nosoop"
}

char g_IncidentFile[PLATFORM_MAX_PATH];

public void OnPluginStart() {
	Handle hGameConf = LoadGameConfigFile("tf2.exploit_heavy_fix");
	if (!hGameConf) {
		SetFailState("Failed to load gamedata (tf2.exploit_heavy_fix).");
	}
	
	Handle dtPlayerHandleAnimEvent = DHookCreateFromConf(hGameConf,
			"CBasePlayer::HandleAnimEvent()");
	DHookEnableDetour(dtPlayerHandleAnimEvent, false, OnHandleAnimEventPre);
	
	delete hGameConf;
	
	BuildPath(Path_SM, g_IncidentFile, sizeof(g_IncidentFile), "logs/exploit_heavy_invis.log");
}

/**
 * Prevents the server from creating a ragdoll with the AE_RAGDOLL animation event as a living
 * Heavy and logs the client that triggers this check.
 * 
 * I'm not 100% sure that this is free of false positives, so if you discover that a player
 * should be ragdolling but isn't, file a bug report.
 */
public MRESReturn OnHandleAnimEventPre(int client, Handle hParams) {
	Address pEvent = DHookGetParam(hParams, 1);
	
	int eventFlags = LoadFromAddress(pEvent + view_as<Address>(0x10), NumberType_Int32);
	int eventValue = LoadFromAddress(pEvent, NumberType_Int32);
	
	// eventFlags & (AE_TYPE_NEWEVENTSYSTEM | AE_TYPE_SERVER) && eventValue == AE_RAGDOLL
	if (eventFlags & 0x401 == 0x401 && eventValue == 0x21
			&& TF2_GetPlayerClass(client) == TFClass_Heavy && IsPlayerAlive(client)) {
		LogToFile(g_IncidentFile, "%L was blocked from creating a ragdoll (heavy exploit?)",
				client);
		return MRES_Supercede;
	}
	return MRES_Ignored;
}
